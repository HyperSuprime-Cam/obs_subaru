# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


"""

Interface class for subaru crosstalk correction

"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_subaruLib', [dirname(__file__)])
        except ImportError:
            import _subaruLib
            return _subaruLib
        if fp is not None:
            try:
                _mod = imp.load_module('_subaruLib', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _subaruLib = swig_import_helper()
    del swig_import_helper
else:
    import _subaruLib
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _subaruLib.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(self) -> PyObject"""
        return _subaruLib.SwigPyIterator_value(self)

    def incr(self, n = 1):
        """
        incr(self, size_t n = 1) -> SwigPyIterator
        incr(self) -> SwigPyIterator
        """
        return _subaruLib.SwigPyIterator_incr(self, n)

    def decr(self, n = 1):
        """
        decr(self, size_t n = 1) -> SwigPyIterator
        decr(self) -> SwigPyIterator
        """
        return _subaruLib.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """distance(self, SwigPyIterator x) -> ptrdiff_t"""
        return _subaruLib.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """equal(self, SwigPyIterator x) -> bool"""
        return _subaruLib.SwigPyIterator_equal(self, *args)

    def copy(self):
        """copy(self) -> SwigPyIterator"""
        return _subaruLib.SwigPyIterator_copy(self)

    def next(self):
        """next(self) -> PyObject"""
        return _subaruLib.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(self) -> PyObject"""
        return _subaruLib.SwigPyIterator___next__(self)

    def previous(self):
        """previous(self) -> PyObject"""
        return _subaruLib.SwigPyIterator_previous(self)

    def advance(self, *args):
        """advance(self, ptrdiff_t n) -> SwigPyIterator"""
        return _subaruLib.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """__eq__(self, SwigPyIterator x) -> bool"""
        return _subaruLib.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, SwigPyIterator x) -> bool"""
        return _subaruLib.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _subaruLib.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _subaruLib.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """__add__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _subaruLib.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, ptrdiff_t n) -> SwigPyIterator
        __sub__(self, SwigPyIterator x) -> ptrdiff_t
        """
        return _subaruLib.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _subaruLib.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ios_base(_object):
    """Proxy of C++ std::ios_base class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ios_base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ios_base, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _subaruLib.ios_base_erase_event
    imbue_event = _subaruLib.ios_base_imbue_event
    copyfmt_event = _subaruLib.ios_base_copyfmt_event
    def register_callback(self, *args):
        """register_callback(self, event_callback __fn, int __index)"""
        return _subaruLib.ios_base_register_callback(self, *args)

    def flags(self, *args):
        """
        flags(self) -> fmtflags
        flags(self, fmtflags __fmtfl) -> fmtflags
        """
        return _subaruLib.ios_base_flags(self, *args)

    def setf(self, *args):
        """
        setf(self, fmtflags __fmtfl) -> fmtflags
        setf(self, fmtflags __fmtfl, fmtflags __mask) -> fmtflags
        """
        return _subaruLib.ios_base_setf(self, *args)

    def unsetf(self, *args):
        """unsetf(self, fmtflags __mask)"""
        return _subaruLib.ios_base_unsetf(self, *args)

    def precision(self, *args):
        """
        precision(self) -> streamsize
        precision(self, streamsize __prec) -> streamsize
        """
        return _subaruLib.ios_base_precision(self, *args)

    def width(self, *args):
        """
        width(self) -> streamsize
        width(self, streamsize __wide) -> streamsize
        """
        return _subaruLib.ios_base_width(self, *args)

    def sync_with_stdio(__sync = True):
        """
        sync_with_stdio(bool __sync = True) -> bool
        sync_with_stdio() -> bool
        """
        return _subaruLib.ios_base_sync_with_stdio(__sync)

    if _newclass:sync_with_stdio = staticmethod(sync_with_stdio)
    __swig_getmethods__["sync_with_stdio"] = lambda x: sync_with_stdio
    def imbue(self, *args):
        """imbue(self, locale __loc) -> locale"""
        return _subaruLib.ios_base_imbue(self, *args)

    def getloc(self):
        """getloc(self) -> locale"""
        return _subaruLib.ios_base_getloc(self)

    def xalloc():
        """xalloc() -> int"""
        return _subaruLib.ios_base_xalloc()

    if _newclass:xalloc = staticmethod(xalloc)
    __swig_getmethods__["xalloc"] = lambda x: xalloc
    def iword(self, *args):
        """iword(self, int __ix) -> long"""
        return _subaruLib.ios_base_iword(self, *args)

    def pword(self, *args):
        """pword(self, int __ix) -> void"""
        return _subaruLib.ios_base_pword(self, *args)

    __swig_destroy__ = _subaruLib.delete_ios_base
    __del__ = lambda self : None;
ios_base_swigregister = _subaruLib.ios_base_swigregister
ios_base_swigregister(ios_base)
cvar = _subaruLib.cvar
ios_base.boolalpha = _subaruLib.cvar.ios_base_boolalpha
ios_base.dec = _subaruLib.cvar.ios_base_dec
ios_base.fixed = _subaruLib.cvar.ios_base_fixed
ios_base.hex = _subaruLib.cvar.ios_base_hex
ios_base.internal = _subaruLib.cvar.ios_base_internal
ios_base.left = _subaruLib.cvar.ios_base_left
ios_base.oct = _subaruLib.cvar.ios_base_oct
ios_base.right = _subaruLib.cvar.ios_base_right
ios_base.scientific = _subaruLib.cvar.ios_base_scientific
ios_base.showbase = _subaruLib.cvar.ios_base_showbase
ios_base.showpoint = _subaruLib.cvar.ios_base_showpoint
ios_base.showpos = _subaruLib.cvar.ios_base_showpos
ios_base.skipws = _subaruLib.cvar.ios_base_skipws
ios_base.unitbuf = _subaruLib.cvar.ios_base_unitbuf
ios_base.uppercase = _subaruLib.cvar.ios_base_uppercase
ios_base.adjustfield = _subaruLib.cvar.ios_base_adjustfield
ios_base.basefield = _subaruLib.cvar.ios_base_basefield
ios_base.floatfield = _subaruLib.cvar.ios_base_floatfield
ios_base.badbit = _subaruLib.cvar.ios_base_badbit
ios_base.eofbit = _subaruLib.cvar.ios_base_eofbit
ios_base.failbit = _subaruLib.cvar.ios_base_failbit
ios_base.goodbit = _subaruLib.cvar.ios_base_goodbit
ios_base.app = _subaruLib.cvar.ios_base_app
ios_base.ate = _subaruLib.cvar.ios_base_ate
ios_base.binary = _subaruLib.cvar.ios_base_binary
ios_base.ios_base_in = _subaruLib.cvar.ios_base_ios_base_in
ios_base.out = _subaruLib.cvar.ios_base_out
ios_base.trunc = _subaruLib.cvar.ios_base_trunc
ios_base.beg = _subaruLib.cvar.ios_base_beg
ios_base.cur = _subaruLib.cvar.ios_base_cur
ios_base.end = _subaruLib.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync = True):
  """
    sync_with_stdio(bool __sync = True) -> bool
    ios_base_sync_with_stdio() -> bool
    """
  return _subaruLib.ios_base_sync_with_stdio(__sync)

def ios_base_xalloc():
  """ios_base_xalloc() -> int"""
  return _subaruLib.ios_base_xalloc()

class ios(ios_base):
    """Proxy of C++ std::basic_ios<(char)> class"""
    __swig_setmethods__ = {}
    for _s in [ios_base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ios, name, value)
    __swig_getmethods__ = {}
    for _s in [ios_base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ios, name)
    __repr__ = _swig_repr
    def rdstate(self):
        """rdstate(self) -> iostate"""
        return _subaruLib.ios_rdstate(self)

    def clear(self, *args):
        """
        clear(self, iostate __state = goodbit)
        clear(self)
        """
        return _subaruLib.ios_clear(self, *args)

    def setstate(self, *args):
        """setstate(self, iostate __state)"""
        return _subaruLib.ios_setstate(self, *args)

    def good(self):
        """good(self) -> bool"""
        return _subaruLib.ios_good(self)

    def eof(self):
        """eof(self) -> bool"""
        return _subaruLib.ios_eof(self)

    def fail(self):
        """fail(self) -> bool"""
        return _subaruLib.ios_fail(self)

    def bad(self):
        """bad(self) -> bool"""
        return _subaruLib.ios_bad(self)

    def exceptions(self, *args):
        """
        exceptions(self) -> iostate
        exceptions(self, iostate __except)
        """
        return _subaruLib.ios_exceptions(self, *args)

    def __init__(self, *args): 
        """__init__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> ios"""
        this = _subaruLib.new_ios(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _subaruLib.delete_ios
    __del__ = lambda self : None;
    def tie(self, *args):
        """
        tie(self) -> ostream
        tie(self, ostream __tiestr) -> ostream
        """
        return _subaruLib.ios_tie(self, *args)

    def rdbuf(self, *args):
        """
        rdbuf(self) -> std::basic_streambuf<(char,std::char_traits<(char)>)>
        rdbuf(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> std::basic_streambuf<(char,std::char_traits<(char)>)>
        """
        return _subaruLib.ios_rdbuf(self, *args)

    def copyfmt(self, *args):
        """copyfmt(self, ios __rhs) -> ios"""
        return _subaruLib.ios_copyfmt(self, *args)

    def fill(self, *args):
        """
        fill(self) -> char_type
        fill(self, char_type __ch) -> char_type
        """
        return _subaruLib.ios_fill(self, *args)

    def imbue(self, *args):
        """imbue(self, locale __loc) -> locale"""
        return _subaruLib.ios_imbue(self, *args)

    def narrow(self, *args):
        """narrow(self, char_type __c, char __dfault) -> char"""
        return _subaruLib.ios_narrow(self, *args)

    def widen(self, *args):
        """widen(self, char __c) -> char_type"""
        return _subaruLib.ios_widen(self, *args)

ios_swigregister = _subaruLib.ios_swigregister
ios_swigregister(ios)

class ostream(ios):
    """Proxy of C++ std::basic_ostream<(char)> class"""
    __swig_setmethods__ = {}
    for _s in [ios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, ostream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> ostream"""
        this = _subaruLib.new_ostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _subaruLib.delete_ostream
    __del__ = lambda self : None;
    def __lshift__(self, *args):
        """
        __lshift__(self, ostream __pf) -> ostream
        __lshift__(self, ios __pf) -> ostream
        __lshift__(self, ios_base __pf) -> ostream
        __lshift__(self, long __n) -> ostream
        __lshift__(self, unsigned long __n) -> ostream
        __lshift__(self, bool __n) -> ostream
        __lshift__(self, short __n) -> ostream
        __lshift__(self, unsigned short __n) -> ostream
        __lshift__(self, int __n) -> ostream
        __lshift__(self, unsigned int __n) -> ostream
        __lshift__(self, long long __n) -> ostream
        __lshift__(self, unsigned long long __n) -> ostream
        __lshift__(self, double __f) -> ostream
        __lshift__(self, float __f) -> ostream
        __lshift__(self, long double __f) -> ostream
        __lshift__(self, void __p) -> ostream
        __lshift__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> ostream
        __lshift__(self, std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)> s) -> ostream
        """
        return _subaruLib.ostream___lshift__(self, *args)

    def put(self, *args):
        """put(self, char_type __c) -> ostream"""
        return _subaruLib.ostream_put(self, *args)

    def write(self, *args):
        """write(self, char_type __s, streamsize __n) -> ostream"""
        return _subaruLib.ostream_write(self, *args)

    def flush(self):
        """flush(self) -> ostream"""
        return _subaruLib.ostream_flush(self)

    def tellp(self):
        """tellp(self) -> pos_type"""
        return _subaruLib.ostream_tellp(self)

    def seekp(self, *args):
        """
        seekp(self, pos_type arg0) -> ostream
        seekp(self, off_type arg0, seekdir arg1) -> ostream
        """
        return _subaruLib.ostream_seekp(self, *args)

ostream_swigregister = _subaruLib.ostream_swigregister
ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    """Proxy of C++ std::basic_istream<(char)> class"""
    __swig_setmethods__ = {}
    for _s in [ios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, istream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, istream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> istream"""
        this = _subaruLib.new_istream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _subaruLib.delete_istream
    __del__ = lambda self : None;
    def __rshift__(self, *args):
        """
        __rshift__(self, istream __pf) -> istream
        __rshift__(self, ios __pf) -> istream
        __rshift__(self, ios_base __pf) -> istream
        __rshift__(self, bool __n) -> istream
        __rshift__(self, short __n) -> istream
        __rshift__(self, unsigned short __n) -> istream
        __rshift__(self, int __n) -> istream
        __rshift__(self, unsigned int __n) -> istream
        __rshift__(self, long __n) -> istream
        __rshift__(self, unsigned long __n) -> istream
        __rshift__(self, long long __n) -> istream
        __rshift__(self, unsigned long long __n) -> istream
        __rshift__(self, float __f) -> istream
        __rshift__(self, double __f) -> istream
        __rshift__(self, long double __f) -> istream
        __rshift__(self, void __p) -> istream
        __rshift__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> istream
        """
        return _subaruLib.istream___rshift__(self, *args)

    def gcount(self):
        """gcount(self) -> streamsize"""
        return _subaruLib.istream_gcount(self)

    def get(self, *args):
        """
        get(self) -> int_type
        get(self, char_type __c) -> istream
        get(self, char_type __s, streamsize __n, char_type __delim) -> istream
        get(self, char_type __s, streamsize __n) -> istream
        get(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb, 
            char_type __delim) -> istream
        get(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> istream
        """
        return _subaruLib.istream_get(self, *args)

    def getline(self, *args):
        """
        getline(self, char_type __s, streamsize __n, char_type __delim) -> istream
        getline(self, char_type __s, streamsize __n) -> istream
        """
        return _subaruLib.istream_getline(self, *args)

    def ignore(self, *args):
        """
        ignore(self, streamsize __n = 1, int_type __delim = std::char_traits< char >::eof()) -> istream
        ignore(self, streamsize __n = 1) -> istream
        ignore(self) -> istream
        """
        return _subaruLib.istream_ignore(self, *args)

    def peek(self):
        """peek(self) -> int_type"""
        return _subaruLib.istream_peek(self)

    def read(self, *args):
        """read(self, char_type __s, streamsize __n) -> istream"""
        return _subaruLib.istream_read(self, *args)

    def readsome(self, *args):
        """readsome(self, char_type __s, streamsize __n) -> streamsize"""
        return _subaruLib.istream_readsome(self, *args)

    def putback(self, *args):
        """putback(self, char_type __c) -> istream"""
        return _subaruLib.istream_putback(self, *args)

    def unget(self):
        """unget(self) -> istream"""
        return _subaruLib.istream_unget(self)

    def sync(self):
        """sync(self) -> int"""
        return _subaruLib.istream_sync(self)

    def tellg(self):
        """tellg(self) -> pos_type"""
        return _subaruLib.istream_tellg(self)

    def seekg(self, *args):
        """
        seekg(self, pos_type arg0) -> istream
        seekg(self, off_type arg0, seekdir arg1) -> istream
        """
        return _subaruLib.istream_seekg(self, *args)

istream_swigregister = _subaruLib.istream_swigregister
istream_swigregister(istream)

class iostream(istream,ostream):
    """Proxy of C++ std::basic_iostream<(char)> class"""
    __swig_setmethods__ = {}
    for _s in [istream,ostream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, iostream, name, value)
    __swig_getmethods__ = {}
    for _s in [istream,ostream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, std::basic_streambuf<(char,std::char_traits<(char)>)> __sb) -> iostream"""
        this = _subaruLib.new_iostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _subaruLib.delete_iostream
    __del__ = lambda self : None;
iostream_swigregister = _subaruLib.iostream_swigregister
iostream_swigregister(iostream)

endl_cb_ptr = _subaruLib.endl_cb_ptr

def endl(*args):
  """endl(ostream arg0) -> ostream"""
  return _subaruLib.endl(*args)
endl = _subaruLib.endl
ends_cb_ptr = _subaruLib.ends_cb_ptr

def ends(*args):
  """ends(ostream arg0) -> ostream"""
  return _subaruLib.ends(*args)
ends = _subaruLib.ends
flush_cb_ptr = _subaruLib.flush_cb_ptr

def flush(*args):
  """flush(ostream arg0) -> ostream"""
  return _subaruLib.flush(*args)
flush = _subaruLib.flush
SHARED_PTR_DISOWN = _subaruLib.SHARED_PTR_DISOWN
LSST_BASE_BASE_H = _subaruLib.LSST_BASE_BASE_H
import lsst.pex.exceptions

class VecDouble(_object):
    """Proxy of C++ std::vector<(double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, VecDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecDouble, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _subaruLib.VecDouble_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _subaruLib.VecDouble___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _subaruLib.VecDouble___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _subaruLib.VecDouble___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _subaruLib.VecDouble_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> VecDouble"""
        return _subaruLib.VecDouble___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, difference_type i, difference_type j, VecDouble v = std::vector< double,std::allocator< double > >())
        __setslice__(self, difference_type i, difference_type j)
        """
        return _subaruLib.VecDouble___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _subaruLib.VecDouble___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _subaruLib.VecDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> VecDouble
        __getitem__(self, difference_type i) -> value_type
        """
        return _subaruLib.VecDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, VecDouble v)
        __setitem__(self, PySliceObject slice)
        __setitem__(self, difference_type i, value_type x)
        """
        return _subaruLib.VecDouble___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _subaruLib.VecDouble_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _subaruLib.VecDouble_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _subaruLib.VecDouble_size(self)

    def clear(self):
        """clear(self)"""
        return _subaruLib.VecDouble_clear(self)

    def swap(self, *args):
        """swap(self, VecDouble v)"""
        return _subaruLib.VecDouble_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _subaruLib.VecDouble_get_allocator(self)

    def begin(self):
        """begin(self) -> iterator"""
        return _subaruLib.VecDouble_begin(self)

    def end(self):
        """end(self) -> iterator"""
        return _subaruLib.VecDouble_end(self)

    def rbegin(self):
        """rbegin(self) -> reverse_iterator"""
        return _subaruLib.VecDouble_rbegin(self)

    def rend(self):
        """rend(self) -> reverse_iterator"""
        return _subaruLib.VecDouble_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _subaruLib.VecDouble_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _subaruLib.VecDouble_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> VecDouble
        __init__(self, VecDouble arg0) -> VecDouble
        __init__(self, size_type size) -> VecDouble
        __init__(self, size_type size, value_type value) -> VecDouble
        """
        this = _subaruLib.new_VecDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _subaruLib.VecDouble_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _subaruLib.VecDouble_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _subaruLib.VecDouble_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _subaruLib.VecDouble_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _subaruLib.VecDouble_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _subaruLib.VecDouble_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _subaruLib.VecDouble_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _subaruLib.VecDouble_capacity(self)

    __swig_destroy__ = _subaruLib.delete_VecDouble
    __del__ = lambda self : None;
VecDouble_swigregister = _subaruLib.VecDouble_swigregister
VecDouble_swigregister(VecDouble)

class VecVecDouble(_object):
    """Proxy of C++ std::vector<(std::vector<(double)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, VecVecDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecVecDouble, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _subaruLib.VecVecDouble_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _subaruLib.VecVecDouble___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _subaruLib.VecVecDouble___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _subaruLib.VecVecDouble___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _subaruLib.VecVecDouble_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> VecVecDouble"""
        return _subaruLib.VecVecDouble___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, difference_type i, difference_type j, VecVecDouble v = std::vector< std::vector< double,std::allocator< double > >,std::allocator< std::vector< double,std::allocator< double > > > >())
        __setslice__(self, difference_type i, difference_type j)
        """
        return _subaruLib.VecVecDouble___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _subaruLib.VecVecDouble___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _subaruLib.VecVecDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> VecVecDouble
        __getitem__(self, difference_type i) -> value_type
        """
        return _subaruLib.VecVecDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, VecVecDouble v)
        __setitem__(self, PySliceObject slice)
        __setitem__(self, difference_type i, value_type x)
        """
        return _subaruLib.VecVecDouble___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _subaruLib.VecVecDouble_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _subaruLib.VecVecDouble_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _subaruLib.VecVecDouble_size(self)

    def clear(self):
        """clear(self)"""
        return _subaruLib.VecVecDouble_clear(self)

    def swap(self, *args):
        """swap(self, VecVecDouble v)"""
        return _subaruLib.VecVecDouble_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _subaruLib.VecVecDouble_get_allocator(self)

    def begin(self):
        """begin(self) -> iterator"""
        return _subaruLib.VecVecDouble_begin(self)

    def end(self):
        """end(self) -> iterator"""
        return _subaruLib.VecVecDouble_end(self)

    def rbegin(self):
        """rbegin(self) -> reverse_iterator"""
        return _subaruLib.VecVecDouble_rbegin(self)

    def rend(self):
        """rend(self) -> reverse_iterator"""
        return _subaruLib.VecVecDouble_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _subaruLib.VecVecDouble_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _subaruLib.VecVecDouble_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> VecVecDouble
        __init__(self, VecVecDouble arg0) -> VecVecDouble
        __init__(self, size_type size) -> VecVecDouble
        __init__(self, size_type size, value_type value) -> VecVecDouble
        """
        this = _subaruLib.new_VecVecDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _subaruLib.VecVecDouble_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _subaruLib.VecVecDouble_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _subaruLib.VecVecDouble_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _subaruLib.VecVecDouble_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _subaruLib.VecVecDouble_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _subaruLib.VecVecDouble_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _subaruLib.VecVecDouble_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _subaruLib.VecVecDouble_capacity(self)

    __swig_destroy__ = _subaruLib.delete_VecVecDouble
    __del__ = lambda self : None;
VecVecDouble_swigregister = _subaruLib.VecVecDouble_swigregister
VecVecDouble_swigregister(VecVecDouble)

class VecInt(_object):
    """Proxy of C++ std::vector<(int)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, VecInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecInt, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _subaruLib.VecInt_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _subaruLib.VecInt___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _subaruLib.VecInt___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _subaruLib.VecInt___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _subaruLib.VecInt_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> VecInt"""
        return _subaruLib.VecInt___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, difference_type i, difference_type j, VecInt v = std::vector< int,std::allocator< int > >())
        __setslice__(self, difference_type i, difference_type j)
        """
        return _subaruLib.VecInt___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _subaruLib.VecInt___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _subaruLib.VecInt___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> VecInt
        __getitem__(self, difference_type i) -> value_type
        """
        return _subaruLib.VecInt___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, VecInt v)
        __setitem__(self, PySliceObject slice)
        __setitem__(self, difference_type i, value_type x)
        """
        return _subaruLib.VecInt___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _subaruLib.VecInt_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _subaruLib.VecInt_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _subaruLib.VecInt_size(self)

    def clear(self):
        """clear(self)"""
        return _subaruLib.VecInt_clear(self)

    def swap(self, *args):
        """swap(self, VecInt v)"""
        return _subaruLib.VecInt_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _subaruLib.VecInt_get_allocator(self)

    def begin(self):
        """begin(self) -> iterator"""
        return _subaruLib.VecInt_begin(self)

    def end(self):
        """end(self) -> iterator"""
        return _subaruLib.VecInt_end(self)

    def rbegin(self):
        """rbegin(self) -> reverse_iterator"""
        return _subaruLib.VecInt_rbegin(self)

    def rend(self):
        """rend(self) -> reverse_iterator"""
        return _subaruLib.VecInt_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _subaruLib.VecInt_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _subaruLib.VecInt_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> VecInt
        __init__(self, VecInt arg0) -> VecInt
        __init__(self, size_type size) -> VecInt
        __init__(self, size_type size, value_type value) -> VecInt
        """
        this = _subaruLib.new_VecInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _subaruLib.VecInt_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _subaruLib.VecInt_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _subaruLib.VecInt_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _subaruLib.VecInt_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _subaruLib.VecInt_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _subaruLib.VecInt_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _subaruLib.VecInt_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _subaruLib.VecInt_capacity(self)

    __swig_destroy__ = _subaruLib.delete_VecInt
    __del__ = lambda self : None;
VecInt_swigregister = _subaruLib.VecInt_swigregister
VecInt_swigregister(VecInt)

class VecVecInt(_object):
    """Proxy of C++ std::vector<(std::vector<(int)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr_nondynamic(self, VecVecInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecVecInt, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _subaruLib.VecVecInt_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _subaruLib.VecVecInt___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _subaruLib.VecVecInt___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _subaruLib.VecVecInt___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _subaruLib.VecVecInt_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> VecVecInt"""
        return _subaruLib.VecVecInt___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, difference_type i, difference_type j, VecVecInt v = std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > >())
        __setslice__(self, difference_type i, difference_type j)
        """
        return _subaruLib.VecVecInt___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _subaruLib.VecVecInt___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _subaruLib.VecVecInt___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> VecVecInt
        __getitem__(self, difference_type i) -> value_type
        """
        return _subaruLib.VecVecInt___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, VecVecInt v)
        __setitem__(self, PySliceObject slice)
        __setitem__(self, difference_type i, value_type x)
        """
        return _subaruLib.VecVecInt___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _subaruLib.VecVecInt_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _subaruLib.VecVecInt_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _subaruLib.VecVecInt_size(self)

    def clear(self):
        """clear(self)"""
        return _subaruLib.VecVecInt_clear(self)

    def swap(self, *args):
        """swap(self, VecVecInt v)"""
        return _subaruLib.VecVecInt_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _subaruLib.VecVecInt_get_allocator(self)

    def begin(self):
        """begin(self) -> iterator"""
        return _subaruLib.VecVecInt_begin(self)

    def end(self):
        """end(self) -> iterator"""
        return _subaruLib.VecVecInt_end(self)

    def rbegin(self):
        """rbegin(self) -> reverse_iterator"""
        return _subaruLib.VecVecInt_rbegin(self)

    def rend(self):
        """rend(self) -> reverse_iterator"""
        return _subaruLib.VecVecInt_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _subaruLib.VecVecInt_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _subaruLib.VecVecInt_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> VecVecInt
        __init__(self, VecVecInt arg0) -> VecVecInt
        __init__(self, size_type size) -> VecVecInt
        __init__(self, size_type size, value_type value) -> VecVecInt
        """
        this = _subaruLib.new_VecVecInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _subaruLib.VecVecInt_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _subaruLib.VecVecInt_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _subaruLib.VecVecInt_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _subaruLib.VecVecInt_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _subaruLib.VecVecInt_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _subaruLib.VecVecInt_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _subaruLib.VecVecInt_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _subaruLib.VecVecInt_capacity(self)

    __swig_destroy__ = _subaruLib.delete_VecVecInt
    __del__ = lambda self : None;
VecVecInt_swigregister = _subaruLib.VecVecInt_swigregister
VecVecInt_swigregister(VecVecInt)

import lsst.pex.logging.loggingLib
import lsst.pex.exceptions.exceptionsLib
import lsst.daf.base.baseLib
import lsst.afw.geom.geomLib
import lsst.afw.cameraGeom.cameraGeomLib
import lsst.afw.image.imageLib
import lsst.pex.policy.policyLib
import lsst.daf.persistence.persistenceLib
import lsst.afw.coord.coordLib

def subtractCrosstalk(*args):
  """
    subtractCrosstalk(MaskedImageF mi, std::size_t nAmp, std::vector<(lsst::obs::subaru::CoeffVector,std::allocator<(lsst::obs::subaru::CoeffVector)>)> coeffs1List, 
        std::vector<(lsst::obs::subaru::CoeffVector,std::allocator<(lsst::obs::subaru::CoeffVector)>)> coeffs2List, 
        CoeffVector gainsPreampSig)
    """
  return _subaruLib.subtractCrosstalk(*args)
# This file is compatible with both classic and new-style classes.


