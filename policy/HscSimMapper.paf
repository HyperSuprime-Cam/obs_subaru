#<?cfg paf policy ?>

# These should be relative to some $ROOT

#calibRoot: "/path/to/calibration/"
#registryPath: "/path/to/registry/"
needCalibRegistry: true
#calibRegistryPath: "/path/to/calibration/registry/"

camera:        "../hscSim/hscSim_geom.paf"
#defects:    "../hscSim/hscSim_defects.paf"
defaultLevel: "Ccd"

skytiles: {
    resolutionPix: 700    # Resolution for skytiles: 700 --> 500 arcsec sides
    paddingArcsec: 10.0   # Overlap between skytiles
}

exposures: {
    raw: {
        template:    "%(field)s/%(dateObs)s/%(pointing)05d/%(filter)s/HSC-%(visit)07d-%(ccd)03d.fits"
        python:     "lsst.afw.image.DecoratedImageU"
        persistable:         "DecoratedImageU"
        storage:     "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
    }
    postISRCCD: {
        template:    "postISRCCD/v%(visit)07d-f%(filter)s/c%(ccd)03d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
    }
    visitim: {
        template:      "visitim/v%(visit)07d-f%(filter)s/c%(ccd)03d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
    }
    calexp: {
        template:      "%(pointing)05d/%(filter)s/corr/CORR-%(visit)07d-%(ccd)03d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
    }

    revexp: {
        template:      "%(pointing)05d/%(filter)s/corr/CORW-%(visit)07d-%(ccd)03d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
    }

    expMetadata: {
        template: "%(pointing)05d/%(filter)s/qa/metaQaExp-%(visit)07d-000.fits"
        python:        "lsst.afw.image.ExposureI"
        persistable:        "ExposureI"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
    }

    wcs: {
        template: "%(pointing)05d/%(filter)s/corr/wcs-%(visit)07d-%(ccd)03d.fits"
        python:        "lsst.afw.image.ExposureI"
        persistable:        "ExposureI"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
        tables:        "raw_skyTile"
    }

    fcr: {
        template: "%(pointing)05d/%(filter)s/corr/fcr-%(visit)07d-%(ccd)03d.fits"
        python:        "lsst.afw.image.ExposureI"
        persistable:        "ExposureI"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
        tables:        "raw_skyTile"
    }
    detj: {
        template:      "%(pointing)05d/%(filter)s/corr/DETJ-%(visit)07d-%(ccd)03d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
    }
    dcor: {
        template:      "%(pointing)05d/%(filter)s/corr/DCOR-%(visit)07d-%(ccd)03d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
    }

    warp: {
        template:      "warp/v%(visit)07d-f%(filter)s/s%(patch)d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Skytile"
        tables:        "raw"
        tables:        "raw_visit"
        columns:       "visit"
        columns:       "filter"
    }

    stack: {
        template:      "stack/%(stack)05d/STK%(patch)08d%(filter)s.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Skytile"
        tables:        "raw_skytile"
    }
    stack_calexp: {
        template:      "stack/%(stack)05d/STKCORR%(patch)08d%(filter)s.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Skytile"
        tables:        "raw_skytile"
    }

    diff: {
        template:      "diff/%(diff)05d/DIFF%(patch)08d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Skytile"
        tables:        "raw_skytile"
    }

    chisquared: {
        template:      "stack/%(stack)05d/CHI%(patch)08d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Skytile"
        tables:        "raw_skytile"
    }

    mosaicCalib: {
        template:    "%(pointing)05d/%(filter)s/output/CALIB-%(visit)07d-%(ccd)03d-%(tract)d.fits"
        python:      "lsst.afw.image.ExposureU"
        persistable: "ExposureU"
        storage:     "FitsStorage"
        columns:     pointing
        columns:     filter
        columns:     visit
        columns:     ccd
        tables:      raw
        level:       Ccd
    }

    coaddTempExp: {
        template:    "coaddTemp/%(filter)s/%(tract)d/TEMP-%(visit)07d-%(ccd)03d-%(patch)s.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        tables:      raw
    }

    ossImage: {
        template:    "%(pointing)05d/%(filter)s/thumbs/oss-%(visit)07d-%(ccd)03d.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "raw"
        tables:      "raw_visit"
    }
    flattenedImage: {
        template:    "%(pointing)05d/%(filter)s/thumbs/flattened-%(visit)07d-%(ccd)03d.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "raw"
        tables:      "raw_visit"
    }

}

calibrations: {
    bias: {
        template:    "BIAS/%(calibDate)s/%(filter)s/%(calibVersion)s/BIAS-%(ccd)03d.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "bias"
        columns:     "ccd"
        reference:   "raw_visit"
        refCols:     "visit"
        refCols:     "filter"
    }
    dark: {
        template:    "DARK/%(calibDate)s/%(filter)s/%(calibVersion)s/DARK-%(ccd)03d.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "dark"
        columns:     "ccd"
        reference:   "raw_visit"
        refCols:     "visit"
        refCols:     "filter"
    }
    flat: {
        template:    "FLAT/%(calibDate)s/%(filter)s/%(calibVersion)s/FLAT-%(ccd)03d.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "flat"
        columns:     "ccd"
        columns:     "filter"
        columns:     "taiObs"
        reference:   "raw_visit"
        refCols:     "visit"
        refCols:     "filter"
        filter:      true
        validRange:  true
        validStartName: validStart
        validEndName: validEnd
    }
    fringe: {
        template:    "FRINGE/%(calibDate)s/%(filter)s/%(calibVersion)s/FRINGE-%(ccd)03d.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "fringe"
        columns:     "ccd"
        columns:     "filter"
        columns:     "taiObs"
        reference:   "raw_visit"
        refCols:     "visit"
        refCols:     "filter"
        filter:      true
        validRange:  true
        validStartName: validStart
        validEndName: validEnd
    }
}



datasets: {
    psf: {
        template:      "%(pointing)05d/%(filter)s/output/PSF-%(visit)07d-%(ccd)03d.boost"
        python:        "lsst.afw.detection.Psf"
        persistable:        "Psf"
        storage:    "BoostStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    apCorr: {
        template:      "%(pointing)05d/%(filter)s/output/APC-%(visit)07d-%(ccd)03d.pickle"
        python:        "lsst.meas.algorithms.ApertureCorrection"
        persistable:        "ApertureCorrection"
        storage:    "PickleStorage"
        tables:        raw
        tables:        raw_visit
    }
    src: {
        template:      "%(pointing)05d/%(filter)s/output/SRC-%(visit)07d-%(ccd)03d.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "SourceCatalog"
        storage:    "FitsCatalogStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    icMatch: {
        template:      "%(pointing)05d/%(filter)s/output/MATCH-%(visit)07d-%(ccd)03d.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:        "BaseCatalog"
        storage:    "FitsCatalogStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    icMatchFull: {
        template:      "%(pointing)05d/%(filter)s/output/ML-%(visit)07d-%(ccd)03d.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:   "BaseCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    srcMatch: {
        template:      "%(pointing)05d/%(filter)s/output/SRCMATCH-%(visit)07d-%(ccd)03d.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:   "BaseCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    srcMatchFull: {
        template:      "%(pointing)05d/%(filter)s/output/SRCML-%(visit)07d-%(ccd)03d.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:   "BaseCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    icSrc: {
        template:      "%(pointing)05d/%(filter)s/output/ICSRC-%(visit)07d-%(ccd)03d.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }

    stack_initPsf: {
        template:    "stack/%(stack)05d/INITPSF%(patch)08d%(filter)s.boost"
	python:      "lsst.afw.detection.Psf"
        persistable: "Psf"
        storage:     "BoostStorage"
        tables:      raw
    }

    stack_psf: {       
        template:      "stack/%(stack)05d/PSF%(patch)08d%(filter)s.boost"
        python:        "lsst.afw.detection.Psf"
        persistable:        "Psf"
        storage:    "BoostStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    stack_apCorr: {
        template:      "stack/%(stack)05d/APC%(patch)08d%(filter)s.fits"
        python:        "lsst.meas.algorithms.ApertureCorrection"
        persistable:        "ApertureCorrection"
        storage:    "PickleStorage"
        tables:        raw
        tables:        raw_visit
    }
    stack_src: {
        template:      "stack/%(stack)05d/SRC%(patch)08d%(filter)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:        "SourceCatalog"
        storage:    "FitsCatalogStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    stack_icMatch: {
        template:      "stack/%(stack)05d/MATCH%(patch)08d%(filter)s.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:        "BaseCatalog"
        storage:    "FitsCatalogStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    stack_icMatchFull: {
        template:      "stack/%(stack)05d/ML%(patch)08d%(filter)s.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:   "BaseCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    stack_srcMatch: {
        template:      "stack/%(stack)05d/SRCMATCH%(patch)08d%(filter)s.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:   "BaseCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    stack_srcMatchFull: {
        template:      "stack/%(stack)05d/SRCML%(patch)08d%(filter)s.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:   "BaseCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    stack_icSrc: {
        template:      "stack/%(stack)05d/ICSRC%(patch)08d%(filter)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }


    log: {
        template:      "%(pointing)05d/%(filter)s/logs/run.log"
        python:        "str"
        persistable:   "None"
        storage:       "TextStorage"
    }
    logDir: {
        template:      "%(pointing)05d/%(filter)s/logs"
        python:        "str"
        persistable:   "None"
        storage:       "None"
    }


    stackrgb: {
        # Will be read/written directly by the user; here for _filename only
        template:      "stack/%(stack)05d/SRC%(patch)08d.tiff"
        python:        "lsst.afw.extensions.rgb.RgbImageF"
        persistable:   "RgbImageF"
        storage:       "SelfStorage"
        tables:        "None"
    }

    diffsources: {
        template:      "diff/%(diff)05d/SRC%(patch)08d%(filter)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw_skytile"
    }

    diffpsf: {
        template:      "diff/%(diff)05d/PSF%(patch)08d%(filter)s.boost"
        python:        "lsst.afw.detection.Psf"
        persistable:   "Psf"
        storage:       "BoostStorage"
        tables:        "raw_skytile"
    }

    warppsf: {
        template:      "%(pointing)05d/%(filter)s/warp/WARPPSF-%(visit)07d-%(ccd)03d.boost"
        python:        "lsst.afw.detection.Psf"
        persistable:   "Psf"
        storage:       "BoostStorage"
        tables:        "raw_skytile"
    }
 
    ccdExposureId: {
        template:     "ignored"
        # Provide something to import, although we actually return a long
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    ccdExposureId_bits: {
        template:     "ignored"
        # Provide something to import, although we actually return an int
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }

    stackExposureId: {
        template:     "ignored"
        # Provide something to import, although we actually return a long
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }
    stackExposureId_bits: {
        template:     "ignored"
        # Provide something to import, although we actually return an int
        python:       "lsst.daf.base.PropertySet"
        persistable:  "ignored"
        storage:      "ignored"
        tables:       "raw"
    }

    processCcd_config: {
        template:      "%(pointing)05d/%(filter)s/processCcd_config/%(visit)07d-%(ccd)03d.py"
        python:        "lsst.pipe.tasks.processCcd.ProcessCcdConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
        tables:        raw_visit
    }
    processCcd_metadata: {
        template:      "%(pointing)05d/%(filter)s/processCcd_metadata/%(visit)07d-%(ccd)03d.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_visit
    }

    processStack_config: {
        template:      "stack/%(stack)05d/processStack_config/%(patch)08d%(filter)s.py"
        python:        "hsc.pipe.tasks.processStack.ProcessStackConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
        tables:        raw
        tables:        raw_visit
    }
    processStack_metadata: {
        template:      "stack/%(stack)05d/processStack_metadata/%(patch)08d%(filter)s.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_visit
    }

    forcedsources: {
        template:      "%(pointing)05d/%(filter)s/output/FORCED-%(visit)07d-%(ccd)03d.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw_skytile"
    }

    deepCoadd: {
        template:    "deepCoadd/%(filter)s/%(tract)d/%(patch)s.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        tables:      raw
    }
    deepCoadd_depth: {
        template:    "deepCoadd/%(filter)s/%(tract)d/%(patch)s.depth.fits"
        python:      "lsst.afw.image.ImageF"
        persistable: "ImageF"
        storage:     "FitsStorage"
        tables:      raw
    }
    deepCoadd_psf: {
        template:    "deepCoadd/%(filter)s/%(tract)d/%(patch)s.boost"
        python:      "lsst.afw.detection.Psf"
        persistable: "Psf"
        storage:     "BoostStorage"
        tables:      raw
    }
    deepCoadd_skyMap: {
        template:    "deepCoadd/skyMap.pickle"
        python:      "lsst.skymap.BaseSkyMap"
        persistable: "ignored"
        storage:     "PickleStorage"
        tables:      raw
    }

    ossThumb: {
        template:    "%(pointing)05d/%(filter)s/thumbs/oss-%(visit)07d-%(ccd)03d.png"
        python:      __builtin__.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    flattenedThumb: {
        template:    "%(pointing)05d/%(filter)s/thumbs/flattened-%(visit)07d-%(ccd)03d.png"
        python:      __builtin__.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    calexpThumb: {
        template:    "%(pointing)05d/%(filter)s/thumbs/corr-%(visit)07d-%(ccd)03d.png"
        python:      __builtin__.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }

    plotMagHist: {
        template:    "%(pointing)05d/%(filter)s/qa/magHist-%(visit)07d-%(ccd)03d.png"
        python:      __builtin__.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    plotSeeingRough: {
        template:    "%(pointing)05d/%(filter)s/qa/seeingRough-%(visit)07d-%(ccd)03d.png"
        python:      __builtin__.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    plotSeeingRobust: {
        template:    "%(pointing)05d/%(filter)s/qa/seeingRobust-%(visit)07d-%(ccd)03d.png"
        python:      __builtin__.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    plotSeeingMap: {
        template:    "%(pointing)05d/%(filter)s/qa/seeingMap-%(visit)07d-%(ccd)03d.png"
        python:      __builtin__.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    plotEllipseMap: {
        template:    "%(pointing)05d/%(filter)s/qa/ellipseMap-%(visit)07d-%(ccd)03d.png"
        python:      __builtin__.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    plotEllipticityMap: {
        template:    "%(pointing)05d/%(filter)s/qa/ellipticityMap-%(visit)07d-%(ccd)03d.png"
        python:      __builtin__.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    plotFwhmGrid: {
        template:    "%(pointing)05d/%(filter)s/qa/fwhmGrid-%(visit)07d-%(ccd)03d.png"
        python:      __builtin__.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    plotEllipseGrid: {
        template:    "%(pointing)05d/%(filter)s/qa/ellipseGrid-%(visit)07d-%(ccd)03d.png"
        python:      __builtin__.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    plotEllipticityGrid: {
        template:    "%(pointing)05d/%(filter)s/qa/ellipticityGrid-%(visit)07d-%(ccd)03d.png"
        python:      __builtin__.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    plotPsfSrcGrid: {
        template:    "%(pointing)05d/%(filter)s/qa/psfSrcGrid-%(visit)07d-%(ccd)03d.png"
        python:      __builtin__.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    plotPsfModelGrid: {
        template:    "%(pointing)05d/%(filter)s/qa/psfModelGrid-%(visit)07d-%(ccd)03d.png"
        python:      __builtin__.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    fitsFwhmGrid: {
        template:    "%(pointing)05d/%(filter)s/qa/fwhmGrid-%(visit)07d-%(ccd)03d.fits"
        python:      "lsst.afw.image.ImageF"
        persistable: "ImageF"
        storage:     "FitsStorage"
        tables:      raw
    }
    fitsEllipticityGrid: {
        template:    "%(pointing)05d/%(filter)s/qa/ellipticityGrid-%(visit)07d-%(ccd)03d.fits"
        python:      "lsst.afw.image.ImageF"
        persistable: "ImageF"
        storage:     "FitsStorage"
        tables:      raw
    }
    fitsEllPaGrid: {
        template:    "%(pointing)05d/%(filter)s/qa/ellPaGrid-%(visit)07d-%(ccd)03d.fits"
        python:      "lsst.afw.image.ImageF"
        persistable: "ImageF"
        storage:     "FitsStorage"
        tables:      raw
    }
    fitsPsfSrcGrid: {
        template:    "%(pointing)05d/%(filter)s/qa/psfSrcGrid-%(visit)07d-%(ccd)03d.fits"
        python:      "lsst.afw.image.ImageF"
        persistable: "ImageF"
        storage:     "FitsStorage"
        tables:      raw
    }
    fitsPsfModelGrid: {
        template:    "%(pointing)05d/%(filter)s/qa/psfModelGrid-%(visit)07d-%(ccd)03d.fits"
        python:      "lsst.afw.image.ImageF"
        persistable: "ImageF"
        storage:     "FitsStorage"
        tables:      raw
    }
    tableSeeingMap: {
        template:    "%(pointing)05d/%(filter)s/qa/seeingMap-%(visit)07d-%(ccd)03d.txt"
        python:      __builtin__.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    tableSeeingGrid: {
        template:    "%(pointing)05d/%(filter)s/qa/seeingGrid-%(visit)07d-%(ccd)03d.txt"
        python:      __builtin__.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }

}
