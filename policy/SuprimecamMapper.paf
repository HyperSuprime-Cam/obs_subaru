#<?cfg paf policy ?>

needCalibRegistry: true

camera:     "../suprimecam/camera"
defects:    "../suprimecam/defects"

levels: {
    # Keys that are NOT relevant for a particular level
    skyTile: "visit" "ccd"
    tract: "patch"
    visit: "ccd"
    sensor: "none"
}
defaultLevel: "sensor"
defaultSubLevels: {
    # Default sublevel for dataRef.subItems()
    skyTile: "sensor"
    visit: "sensor"
    sensor: "none"
}

# exposures and datasets which are needed for all of the mappers are defined
# in the obs_base package (in either exposures.yaml or datasets.yaml).
# Where a modification to such a dataset is required for a particular camera,
# (e.g., for a template or specialized python type), the modification will
# appear below as a partial dataset definition.

exposures: {
    raw: {
        template:    "%(field)s/%(dateObs)s/%(pointing)05d/%(filter)s/SUPA%(visit)07d%(ccd)1d.fits"
    }
    postISRCCD: {
        template:    "postISRCCD/v%(visit)07d-f%(filter)s/c%(ccd)1d.fits"
    }
    icExp: {
        template:      "%(pointing)05d/%(filter)s/corr/ICEXP%(visit)07d%(ccd)1d.fits"
    }
    calexp: {
        template:      "%(pointing)05d/%(filter)s/corr/CORR%(visit)07d%(ccd)1d.fits"
    }
    revexp: {
        template:      "%(pointing)05d/%(filter)s/corr/CORW%(visit)07d%(ccd)d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
    }
    expMetadata: {
        template: "%(pointing)05d/%(filter)s/qa/metaQaExp%(visit)07d0.fits"
        python:        "lsst.afw.image.ExposureI"
        persistable:        "ExposureI"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
    }
    wcs: {
        template: "jointcal-results/%(tract)04d/wcs-%(visit)07d-%(ccd)03d.fits"
        columns:       "pointing" "filter" "visit" "ccd"
    }
    fcr: {
        template: "jointcal-results/%(tract)04d/fcr-%(visit)07d-%(ccd)03d.fits"
        python:        "lsst.afw.image.ExposureI"
        persistable:        "ExposureI"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
        columns:       "pointing" "filter" "visit" "ccd"
    }
    detj: {
        template:      "%(pointing)05d/%(filter)s/corr/DETJ%(visit)07d%(ccd)1d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
        columns:       "pointing" "filter" "visit" "ccd"
    }
    dcor: {
        template:      "%(pointing)05d/%(filter)s/corr/DCOR%(visit)07d%(ccd)1d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:        "raw"
        tables:        "raw_visit"
        columns:       "pointing" "filter" "visit" "ccd"
    }
    calibrated_exp:  {
        template:      "%(pointing)05d/%(filter)s/corr/%(tract)04d/CALEXP-%(visit)07d%(ccd)1d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:   "ExposureF"
        storage:       "FitsStorage"
        tables:        "raw"
        tables:        "raw_visit"
        columns:       "pointing" "filter" "visit" "ccd"
    }
    deepCoadd_tempExp: {
        template:    "deepCoadd/%(filter)s/%(tract)d/%(patch)s/warp-%(filter)s-%(tract)d-%(patch)s-%(visit)d.fits"
    }
    mosaicCalib: {
        template:    "%(pointing)05d/%(filter)s/output/CALIB%(visit)07d%(ccd)1d-%(tract)d.fits"
        python:      "lsst.afw.image.ExposureU"
        persistable: "ExposureU"
        storage:     "FitsStorage"
        columns:     pointing
        columns:     filter
        columns:     visit
        columns:     ccd
        tables:      raw
        level:       Ccd
    }
    coaddTempExp: {
        template:    "coaddTemp/%(filter)s/%(tract)d/TEMP%(visit)07d%(ccd)1d-%(patch)s.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "Skytile"
        tables:      raw
    }
    ossImage: {
        template:    "%(pointing)05d/%(filter)s/thumbs/oss%(visit)07d%(ccd)d.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "raw"
        tables:      "raw_visit"
    }
    flattenedImage: {
        template:    "%(pointing)05d/%(filter)s/thumbs/flattened%(visit)07d%(ccd)d.fits"
        python:      "lsst.afw.image.ExposureF"
        persistable: "ExposureF"
        storage:     "FitsStorage"
        level:       "Ccd"
        tables:      "raw"
        tables:      "raw_visit"
    }
}

calibrations: {
    bias: {
        template:    "BIAS/%(calibDate)s/NONE/BIAS-%(calibDate)s-%(ccd)1d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:     "bias"
        columns: "ccd"
        columns: "taiObs"
        reference:   "raw_visit"
        refCols:     "visit"
        refCols:     "filter"
        validRange:  true
        validStartName: validStart
        validEndName: validEnd
    }
    dark: {
        template:    "DARK/%(calibDate)s/NONE/DARK-%(calibDate)s-%(ccd)1d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:     "dark"
        columns: "ccd"
        columns: "taiObs"
        reference:   "raw_visit"
        refCols:     "visit"
        refCols:     "filter"
        validRange:  true
        validStartName: validStart
        validEndName: validEnd
    }
    flat: {
        template:    "FLAT/%(calibDate)s/%(filter)s/FLAT-%(calibDate)s-%(filter)s-%(ccd)1d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:     "flat"
        columns: "ccd"
        columns: "filter"
        columns: "taiObs"
        reference:   "raw_visit"
        refCols:     "visit"
        refCols:     "filter"
        filter:      true
        validRange:  true
        validStartName: validStart
        validEndName: validEnd
    }
    fringe: {
        template:    "FRINGE/%(calibDate)s/%(filter)s/FRINGE-%(calibDate)s-%(filter)s-%(ccd)1d.fits"
        python:        "lsst.afw.image.ExposureF"
        persistable:        "ExposureF"
        storage:    "FitsStorage"
        level:        "Ccd"
        tables:     "fringe"
        columns: "ccd"
        columns: "filter"
        columns: "taiObs"
        reference:   "raw_visit"
        refCols:     "visit"
        refCols:     "filter"
        filter:      true
        validRange:  true
        validStartName: validStart
        validEndName: validEnd
    }
}

datasets: {
    icExpBackground: {
        template:      "%(pointing)05d/%(filter)s/corr/ICEXPBKGD%(visit)07d%(ccd)1d.fits"
    }
    calexpBackground: {
        template:      "%(pointing)05d/%(filter)s/corr/BKGD%(visit)07d%(ccd)1d.fits"
    }
    src: {
        template:      "%(pointing)05d/%(filter)s/output/SRC%(visit)07d%(ccd)1d.fits"
    }
    calibrated_src: {
        template:      "%(pointing)05d/%(filter)s/output/%(tract)04d/CALSRC%(visit)07d%(ccd)1d.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "SourceCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    icMatch: {
        template:      "%(pointing)05d/%(filter)s/output/MATCH%(visit)07d%(ccd)1d.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:        "BaseCatalog"
        storage:    "FitsCatalogStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    icMatchFull: {
        template:      "%(pointing)05d/%(filter)s/output/ML%(visit)07d%(ccd)1d.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:   "BaseCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    srcMatch: {
        template:      "%(pointing)05d/%(filter)s/output/SRCMATCH%(visit)07d%(ccd)1d.fits"
    }
    srcMatchFull: {
        template:      "%(pointing)05d/%(filter)s/output/SRCML%(visit)07d%(ccd)1d.fits"
        python:        "lsst.afw.table.BaseCatalog"
        persistable:   "BaseCatalog"
        storage:       "FitsCatalogStorage"
        tables:        "raw"
        tables:        "raw_visit"
    }
    icSrc: {
        template:      "%(pointing)05d/%(filter)s/output/ICSRC%(visit)07d%(ccd)1d.fits"
    }
    log: {
        template:      "%(pointing)05d/%(filter)s/logs/run.log"
        python:        "str"
        persistable:   "None"
        storage:       "TextStorage"
    }
    logDir: {
        template:      "%(pointing)05d/%(filter)s/logs"
        python:        "str"
        persistable:   "None"
        storage:       "None"
    }
    warppsf: {
        template:      "%(pointing)05d/%(filter)s/warp/WARPPSF-%(visit)07d-%(ccd)03d.boost"
        python:        "lsst.afw.detection.Psf"
        persistable:   "Psf"
        storage:       "BoostStorage"
        tables:        "raw_skytile"
    }
    processCcd_metadata: {
        template:      "%(pointing)05d/%(filter)s/processCcd_metadata/%(visit)07d%(ccd)1d.boost"
    }
    isr_config: {
        python:        "lsst.obs.subaru.isr.SuprimeCamIsrConfig"
    }
    isr_metadata: {
        template:      "%(pointing)05d/%(filter)s/isr_metadata/%(visit)07d%(ccd)1d.boost"
    }
    characterizeImage_metadata: {
        template:      "%(pointing)05d/%(filter)s/characterizeImage_metadata/%(visit)07d%(ccd)1d.boost"
    }
    calibrate_metadata: {
        template:      "%(pointing)05d/%(filter)s/calibrate_metadata/%(visit)07d%(ccd)1d.boost"
    }
    singleFrameDriver_metadata: {
        template:      "%(pointing)05d/%(filter)s/singleFrameDriver_metadata/%(visit)07d.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_visit
    }
    processStack_metadata: {
        template:      "stack/%(stack)05d/processStack_metadata/%(patch)08d%(filter)s.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_visit
    }
    deepCoadd_srcMatch: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/srcMatch-%(filter)s-%(tract)d-%(patch)s.fits"
    }
    deepCoadd_calexpBackground: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/bkgd-%(filter)s-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.math.BackgroundList"
        persistable:   "PurePythonClass"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    stack_config: {
        template:      "config/stack.py"
        python:        "hsc.meas.mosaic.stackTask.StackConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
        tables:        raw
        tables:        raw_visit
    }
    deep_forcedPhotCoadd_config: {
        template:      "config/forcedPhotCoadd.py"
        python:        "lsst.pipe.tasks.forcedPhotCoadd.ForcedPhotCoaddConfig"
        persistable:      "Config"
        storage:    "ConfigStorage"
    }
    deep_forcedPhotCoadd_metadata: {
        template:      "deepCoadd_forcedPhotCoadd_metadata/%(filter)s/%(tract)d/%(patch)s.boost"
        python:        "lsst.daf.base.PropertySet"
        persistable:        "PropertySet"
        storage:    "BoostStorage"
        tables:        raw
        tables:        raw_visit
    }
    deepCoadd_extract: {
        template:      "deepCoadd-results/%(filter)s/%(tract)d/%(patch)s/extract-%(tract)d-%(patch)s.fits"
        python:        "lsst.afw.table.SourceCatalog"
        persistable:   "ignored"
        storage:       "FitsCatalogStorage"
        tables:        raw
        tables:        raw_skyTile
    }
    forced_src: {
        template:      "%(pointing)05d/%(filter)s/tract%(tract)d/FORCEDSRC%(visit)07d%(ccd)1d.fits"
    }
    forced_src_schema: {
        template:      "schema/forced_src.fits"
    }
    forcedPhotCcd_metadata: {
        template:      "%(pointing)05d/%(filter)s/tract%(tract)d/forcedPhotCcd_metadata/%(visit)07d%(ccd)1d.boost"
    }
    ossThumb: {
        template:    "%(pointing)05d/%(filter)s/thumbs/oss%(visit)07d%(ccd)d.png"
        python:      builtins.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    flattenedThumb: {
        template:    "%(pointing)05d/%(filter)s/thumbs/flattened%(visit)07d%(ccd)d.png"
        python:      builtins.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    calexpThumb: {
        template:    "%(pointing)05d/%(filter)s/thumbs/corr%(visit)07d%(ccd)d.png"
        python:      builtins.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    plotMagHist: {
        template:    "%(pointing)05d/%(filter)s/qa/magHist%(visit)07d%(ccd)d.png"
        python:      builtins.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    plotSeeingRough: {
        template:    "%(pointing)05d/%(filter)s/qa/seeingRough%(visit)07d%(ccd)d.png"
        python:      builtins.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    plotSeeingRobust: {
        template:    "%(pointing)05d/%(filter)s/qa/seeingRobust%(visit)07d%(ccd)d.png"
        python:      builtins.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    plotSeeingMap: {
        template:    "%(pointing)05d/%(filter)s/qa/seeingMap%(visit)07d%(ccd)d.png"
        python:      builtins.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    plotEllipseMap: {
        template:    "%(pointing)05d/%(filter)s/qa/ellipseMap%(visit)07d%(ccd)d.png"
        python:      builtins.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    plotEllipticityMap: {
        template:    "%(pointing)05d/%(filter)s/qa/ellipticityMap%(visit)07d%(ccd)d.png"
        python:      builtins.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    plotFwhmGrid: {
        template:    "%(pointing)05d/%(filter)s/qa/fwhmGrid%(visit)07d%(ccd)d.png"
        python:      builtins.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    plotEllipseGrid: {
        template:    "%(pointing)05d/%(filter)s/qa/ellipseGrid%(visit)07d%(ccd)d.png"
        python:      builtins.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    plotEllipticityGrid: {
        template:    "%(pointing)05d/%(filter)s/qa/ellipticityGrid%(visit)07d%(ccd)d.png"
        python:      builtins.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    plotPsfSrcGrid: {
        template:    "%(pointing)05d/%(filter)s/qa/psfSrcGrid%(visit)07d%(ccd)d.png"
        python:      builtins.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    plotPsfModelGrid: {
        template:    "%(pointing)05d/%(filter)s/qa/psfModelGrid%(visit)07d%(ccd)d.png"
        python:      builtins.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    fitsFwhmGrid: {
        template:    "%(pointing)05d/%(filter)s/qa/fwhmGrid%(visit)07d%(ccd)d.fits"
        python:      "lsst.afw.image.ImageF"
        persistable: "ImageF"
        storage:     "FitsStorage"
        tables:      raw
    }
    fitsEllipticityGrid: {
        template:    "%(pointing)05d/%(filter)s/qa/ellipticityGrid%(visit)07d%(ccd)d.fits"
        python:      "lsst.afw.image.ImageF"
        persistable: "ImageF"
        storage:     "FitsStorage"
        tables:      raw
    }
    fitsEllPaGrid: {
        template:    "%(pointing)05d/%(filter)s/qa/ellPaGrid%(visit)07d%(ccd)d.fits"
        python:      "lsst.afw.image.ImageF"
        persistable: "ImageF"
        storage:     "FitsStorage"
        tables:      raw
    }
    fitsPsfSrcGrid: {
        template:    "%(pointing)05d/%(filter)s/qa/psfSrcGrid%(visit)07d%(ccd)d.fits"
        python:      "lsst.afw.image.ImageF"
        persistable: "ImageF"
        storage:     "FitsStorage"
        tables:      raw
    }
    fitsPsfModelGrid: {
        template:    "%(pointing)05d/%(filter)s/qa/psfModelGrid%(visit)07d%(ccd)d.fits"
        python:      "lsst.afw.image.ImageF"
        persistable: "ImageF"
        storage:     "FitsStorage"
        tables:      raw
    }
    tableSeeingMap: {
        template:    "%(pointing)05d/%(filter)s/qa/seeingMap%(visit)07d%(ccd)d.txt"
        python:      builtins.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    tableSeeingGrid: {
        template:    "%(pointing)05d/%(filter)s/qa/seeingGrid%(visit)07d%(ccd)d.txt"
        python:      builtins.str
        persistable: None
        storage:     TextStorage
        tables:      raw
    }
    mergeCoaddMeasurements_config: {
        python:        "lsst.pipe.tasks.multiBand.MergeSourcesConfig"
    }
    multiband_config: {
        template:      "config/multiband.py"
        python:        "hsc.pipe.tasks.multiband.MultiBandConfig"
        persistable:   "Config"
        storage:       "ConfigStorage"
    }
}
